---
import { Image } from 'astro:assets';
import { Menu, X } from 'lucide-astro';
import logo from '../assets/logo.svg';
import ThemeToggle from './ThemeToggle.astro';

interface MenuItem {
  text?: string;
  href: string;
}

const menuItems: MenuItem[] = [
  { text: 'Blog', href: '#blog' },
  { text: 'Technologies', href: '#technologies' },
  { text: 'Projects', href: '#projects' },
  { text: 'Experience', href: '#experience' },
  { text: 'About', href: '#about' },
  { text: 'Contact', href: '#contact' },
];
---

<nav class="fixed top-0 left-0 right-0 bg-white/80 dark:bg-black/80 backdrop-blur-md z-50 border-b border-gray-100 dark:border-zinc-800">
  <div class="max-w-5xl mx-auto px-4 py-5">
    <!-- Mobile: Logo and Burger -->
    <div class="flex md:hidden justify-between items-center">
      <a href="#home" class="flex items-center">
        <Image 
          loading="eager" 
          src={logo} 
          alt="Your Logo" 
          class="h-8 w-8 rounded-full transition-transform duration-500 hover:scale-110 dark:invert" 
          id="mobileLogo"
        />
      </a>
      <button 
        id="menuButton"
        class="p-2 transition-transform hover:scale-105 dark:hover:bg-zinc-800/50"
        aria-label="Menu"
      >
        <Menu id="menuIcon" class="w-6 h-6 transition-opacity duration-300 stroke-gray-900 dark:stroke-white" />
        <X id="closeIcon" class="w-6 h-6 hidden transition-opacity duration-300 stroke-gray-900 dark:stroke-white" />
      </button>
    </div>

    <!-- Mobile Menu -->
    <div id="mobileMenu" class="hidden md:hidden fixed inset-0 top-[73px] bg-white/98 dark:bg-black/98">
      <div class="h-[calc(100vh-73px)] overflow-y-auto">
        <ul class="flex flex-col items-center gap-8 py-12">
          {menuItems.map((item, index) => (
            <li class="nav-item-mobile" style={`--delay: ${index * 100}ms`}>
              <a 
                href={item.href}
                class="text-2xl text-gray-900 hover:text-black dark:text-white dark:hover:text-white/80 transition-colors font-medium relative nav-link"
              >
                {item.text}
              </a>
            </li>
          ))}
          <li class="nav-item-mobile" style={`--delay: ${menuItems.length * 100}ms`}>
            <ThemeToggle />
          </li>
        </ul>
      </div>
    </div>

    <!-- Desktop: Full menu -->
    <div class="hidden md:flex items-center justify-between">
      <a href="#home" class="flex items-center">
        <Image 
          loading="eager" 
          src={logo} 
          alt="Your Logo" 
          class="h-8 w-8 rounded-full transition-transform duration-500 hover:scale-110 dark:invert" 
          id="desktopLogo"
        />
      </a>
      
      <ul class="flex items-center gap-8">
        {menuItems.map((item, index) => (
          <li class="nav-item" style={`--delay: ${index * 50}ms`}>
            <a 
              href={item.href}
              class="text-gray-600 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white transition-colors relative nav-link"
            >
              {item.text}
            </a>
          </li>
        ))}
      </ul>
      <ThemeToggle />
    </div>
  </div>
</nav>

<!-- Blur Overlay -->
<div id="blurOverlay" class="hidden fixed inset-0 z-40 backdrop-blur-md"></div>

<style>
  /* Underline animation for nav links */
  .nav-link::after {
    content: '';
    position: absolute;
    width: 0;
    height: 2px;
    bottom: -4px;
    left: 0;
    background-color: #111827; /* gray-900 */
    transition: width 0.3s ease-in-out;
  }

  .dark .nav-link::after {
    background-color: #fff;
  }

  .nav-link:hover::after {
    width: 100%;
  }

  /* Desktop nav items fade in */
  .nav-item {
    opacity: 0;
    animation: fadeInSlideDown 0.5s ease forwards;
    animation-delay: var(--delay);
  }

  /* Mobile nav items slide in */
  .nav-item-mobile {
    opacity: 0;
    transform: translateY(-10px);
    animation: slideDown 0.3s ease forwards;
    animation-delay: var(--delay);
  }

  @keyframes fadeInSlideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Mobile menu animation */
  #mobileMenu {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  #mobileMenu.hidden {
    display: none;
    opacity: 0;
    transform: translateY(-10px);
  }

  #mobileMenu:not(.hidden) {
    display: block;
    opacity: 1;
    transform: translateY(0);
  }

  /* Prevent scrolling when menu is open */
  body.menu-open {
    overflow: hidden;
    height: 100vh;
    padding-right: var(--scrollbar-width, 0px); /* Prevent layout shift */
  }

  @media (prefers-reduced-motion: reduce) {
    .nav-item,
    .nav-item-mobile,
    .nav-link::after,
    #mobileMenu,
    .transition-transform {
      animation: none !important;
      transition: none !important;
    }
  }

  /* Add dark mode gradient for mobile menu */
  .dark #mobileMenu {
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(8px);
  }

  /* Blur overlay animation */
  #blurOverlay {
    transition: opacity 0.3s ease;
    opacity: 0;
  }

  #blurOverlay.visible {
    opacity: 1;
  }

  #blurOverlay.hidden {
    display: none;
  }
</style>

<script>
  // Calculate scrollbar width
  const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
  document.documentElement.style.setProperty('--scrollbar-width', `${scrollbarWidth}px`);

  const menuButton = document.getElementById('menuButton');
  const mobileMenu = document.getElementById('mobileMenu');
  const menuIcon = document.getElementById('menuIcon');
  const closeIcon = document.getElementById('closeIcon');
  const blurOverlay = document.getElementById('blurOverlay');
  let scrollPosition = 0;

  if (menuButton && mobileMenu && menuIcon && closeIcon && blurOverlay) {
    menuButton.addEventListener('click', () => {
      const isOpening = mobileMenu.classList.contains('hidden');
      
      if (isOpening) {
        // Store current scroll position when opening
        scrollPosition = window.scrollY;
      }

      mobileMenu.classList.toggle('hidden');
      menuIcon.classList.toggle('hidden');
      closeIcon.classList.toggle('hidden');
      document.body.classList.toggle('menu-open');
      
      // Toggle blur overlay
      blurOverlay.classList.toggle('hidden');
      setTimeout(() => {
        blurOverlay.classList.toggle('visible');
      }, 0);

      if (isOpening) {
        // Maintain scroll position when opening
        document.body.style.top = `-${scrollPosition}px`;
      } else {
        // Restore scroll position when closing
        document.body.style.top = '';
        window.scrollTo(0, scrollPosition);
      }
      
      // Reset animations
      const menuItems = mobileMenu.querySelectorAll('.nav-item-mobile');
      menuItems.forEach((item) => {
        item.style.animation = 'none';
        item.offsetHeight;
        item.style.animation = null;
      });
    });

    // Close menu when clicking a link
    mobileMenu.querySelectorAll('a').forEach(link => {
      link.addEventListener('click', () => {
        mobileMenu.classList.add('hidden');
        menuIcon.classList.remove('hidden');
        closeIcon.classList.add('hidden');
        document.body.classList.remove('menu-open');
        document.body.style.top = '';
        blurOverlay.classList.remove('visible');
        
        // Restore scroll position and cleanup
        window.scrollTo(0, scrollPosition);
        setTimeout(() => {
          blurOverlay.classList.add('hidden');
        }, 300);
      });
    });
  }

  // Enhanced smooth scroll rotation for logos
  const mobileLogo = document.getElementById('mobileLogo');
  const desktopLogo = document.getElementById('desktopLogo');
  
  let lastScrollY = window.scrollY;
  let ticking = false;

  window.addEventListener('scroll', () => {
    if (!ticking) {
      window.requestAnimationFrame(() => {
        const rotation = window.scrollY / 2;
        if (mobileLogo) mobileLogo.style.transform = `rotate(${rotation}deg)`;
        if (desktopLogo) desktopLogo.style.transform = `rotate(${rotation}deg)`;
        ticking = false;
      });
      ticking = true;
    }
  });
</script>